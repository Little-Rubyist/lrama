module Lrama
  class Grammar
    class Symbol
      attr_accessor id: Lexer::Token
      attr_accessor alias_name: String?
      attr_accessor number: Integer
      attr_accessor tag: Lexer::Token::Tag?
      attr_accessor term: bool
      attr_accessor token_id: Integer
      attr_accessor nullable: bool
      attr_accessor precedence: Precedence?
      attr_accessor printer: Printer?
      attr_accessor destructor: Destructor?
      attr_accessor error_token: ErrorToken

      attr_accessor first_set: Set[Array[Symbol]] | Set[Symbol]
      attr_accessor first_set_bitmap: Integer
      attr_writer eof_symbol: bool
      attr_writer error_symbol: bool
      attr_writer undef_symbol: bool
      attr_writer accept_symbol: bool

      def initialize: (
          id: Lexer::Token, term: bool, ?alias_name: String?, ?number: Integer?, ?tag: Lexer::Token?,
          ?token_id: Integer?, ?nullable: bool?, ?precedence: Precedence?, ?printer: Printer?) -> void

      def term?: () -> bool
      def nterm?: () -> bool
      def eof_symbol?: () -> bool
      def error_symbol?: () -> bool
      def undef_symbol?: () -> bool
      def accept_symbol?: () -> bool
      def display_name: () -> String
      def enum_name: () -> String
      def comment: () -> String?
    end
  end
end
