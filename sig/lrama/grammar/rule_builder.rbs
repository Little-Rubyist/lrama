module Lrama
  class Grammar
    class RuleBuilder
      attr_accessor lhs: Lexer::Token
      attr_accessor line: Integer?
      attr_reader rhs: Array[Lexer::Token]
      attr_reader user_code: Lexer::Token::UserCode?
      attr_reader precedence_sym: Lexer::Token?

      @user_code: Lexer::Token::UserCode?

      def initialize: (Counter rule_counter, Counter midrule_action_counter) -> void
      def add_rhs: (Lexer::Token rhs) -> void
      def user_code=: (Lexer::Token::UserCode user_code) -> void
      def precedence_sym=: (Lexer::Token user_code) -> void
      def freeze_rhs: () -> void
      def preprocess_references: () -> void
      def midrule_action_rules: () -> Array[Rule]
      def rhs_with_new_tokens: () -> Array[Lexer::Token]

      private

      def process_rhs: () -> void
      def numberize_references: () -> void
      def setup_references: () -> void
      def flush_user_code: () -> void
      def build_rules: () -> void
    end
  end
end
