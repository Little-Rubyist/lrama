module Lrama
  class Grammar
    class ParameterizingRuleBuilder
      attr_reader name: String
      attr_reader parameters: Array[Lexer::Token]
      attr_reader rhs: Array[Grammar::ParameterizingRuleRhsBuilder]

      @required_parameters_count: Integer

      def initialize: (String name, Array[Lexer::Token] parameters, Array[Grammar::ParameterizingRuleRhsBuilder] rhs) -> void
      def build_rules: (Lexer::Token::Parameterizing token, Counter rule_counter, untyped lhs_tag, Integer? line) -> Grammar::ParameterizingRule

      private

      def validate_argument_number!: (Lexer::Token::Parameterizing token) -> void
      def lhs_token: (Lexer::Token::Parameterizing token) -> Lexer::Token
      def rhs_token: (Lexer::Token::Parameterizing token, Grammar::ParameterizingRuleRhsBuilder rhs) -> Array[Lexer::Token]
    end
  end
end
