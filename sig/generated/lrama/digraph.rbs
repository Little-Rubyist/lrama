# Generated from lib/lrama/digraph.rb with RBS::Inline

module Lrama
  # Digraph Algorithm of https://dl.acm.org/doi/pdf/10.1145/69622.357187 (P. 625)
  #
  # Digraph is an algorithm for graph data structure.
  # The algorithm efficiently traverses SCC (Strongly Connected Component) of graph
  # and merges nodes attributes within the same SCC.
  #
  # `compute_read_sets` and `compute_follow_sets` have the same structure.
  # Graph of gotos and attributes of gotos are given then compute propagated attributes for each node.
  #
  # In the case of `compute_read_sets`:
  #
  # * Set of gotos is nodes of graph
  # * `reads_relation` is edges of graph
  # * `direct_read_sets` is nodes attributes
  #
  # In the case of `compute_follow_sets`:
  #
  # * Set of gotos is nodes of graph
  # * `includes_relation` is edges of graph
  # * `read_sets` is nodes attributes
  #
  #
  # @rbs generic X < Object -- Type of a node
  # @rbs generic Y < _Or    -- Type of attribute sets assigned to a node which should support merge operation (#| method)
  class Digraph[X < Object, Y < _Or]
    interface _Or
      def |: (self) -> self
    end

    @sets: Array[X]

    @relation: Hash[X, Array[X]]

    @base_function: Hash[X, Y]

    @stack: Array[X]

    @h: Hash[X, (Integer | Float)?]

    @result: Hash[X, Y]

    # @rbs sets: Array[X] -- Nodes of graph
    # @rbs relation: Hash[X, Array[X]] -- Edges of graph
    # @rbs base_function: Hash[X, Y] -- Attributes of nodes
    # @rbs return: void
    def initialize: (Array[X] sets, Hash[X, Array[X]] relation, Hash[X, Y] base_function) -> void

    # @rbs () -> Hash[X, Y]
    def compute: () -> Hash[X, Y]

    private

    # @rbs (X x) -> void
    def traverse: (X x) -> void
  end
end
