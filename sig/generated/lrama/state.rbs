# Generated from lib/lrama/state.rb with RBS::Inline

module Lrama
  class State
    type conflict = State::ShiftReduceConflict | State::ReduceReduceConflict

    type transition = [ Shift, State ]

    type goto = [ State, Shift, State ]

    type lookahead_set = Hash[States::Item, Array[Grammar::Symbol]]

    @id: Integer

    @accessing_symbol: Grammar::Symbol

    @kernels: Array[States::Item]

    @items: Array[States::Item]

    @items_to_state: Hash[Array[States::Item], State]

    @conflicts: Array[conflict]

    @resolved_conflicts: Array[ResolvedConflict]

    @default_reduction_rule: Grammar::Rule?

    @closure: Array[States::Item]

    @nterm_transitions: Array[transition]

    @term_transitions: Array[transition]

    @transitions: Array[transition]

    @internal_dependencies: Hash[transition, Array[goto]]

    @successor_dependencies: Hash[transition, Array[goto]]

    attr_reader id: Integer

    attr_reader accessing_symbol: Grammar::Symbol

    attr_reader kernels: Array[States::Item]

    attr_reader conflicts: Array[conflict]

    attr_reader resolved_conflicts: Array[ResolvedConflict]

    attr_reader default_reduction_rule: Grammar::Rule?

    attr_reader closure: Array[States::Item]

    attr_reader items: Array[States::Item]

    attr_reader annotation_list: Array[InadequacyAnnotation]

    attr_reader predecessors: Array[State]

    attr_accessor shifts: Array[Shift]

    attr_accessor reduces: Array[Reduce]

    attr_accessor ielr_isocores: Array[State]

    attr_accessor lalr_isocore: State

    attr_accessor lookaheads_recomputed: bool

    attr_accessor follow_kernel_items: Hash[transition, Hash[States::Item, bool]]

    attr_accessor always_follows: Hash[transition, Array[Grammar::Symbol]]

    # @rbs (Integer id, Grammar::Symbol accessing_symbol, Array[States::Item] kernels) -> void
    def initialize: (Integer id, Grammar::Symbol accessing_symbol, Array[States::Item] kernels) -> void

    # @rbs (Array[States::Item] closure) -> void
    def closure=: (Array[States::Item] closure) -> void

    # @rbs () -> Array[Reduce]
    def non_default_reduces: () -> Array[Reduce]

    # @rbs () -> void
    def compute_shifts_reduces: () -> void

    # @rbs (Array[States::Item] items, State next_state) -> void
    def set_items_to_state: (Array[States::Item] items, State next_state) -> void

    # @rbs (Grammar::Rule rule, Array[Grammar::Symbol] look_ahead) -> void
    def set_look_ahead: (Grammar::Rule rule, Array[Grammar::Symbol] look_ahead) -> void

    # @rbs () -> Array[transition]
    def nterm_transitions: () -> Array[transition]

    # @rbs () -> Array[transition]
    def term_transitions: () -> Array[transition]

    # @rbs () -> Array[transition]
    def transitions: () -> Array[transition]

    # @rbs (Shift shift, State next_state) -> void
    def update_transition: (Shift shift, State next_state) -> void

    # @rbs () -> void
    def clear_transitions_cache: () -> void

    # @rbs () -> Array[transition]
    def selected_term_transitions: () -> Array[transition]

    # Move to next state by sym
    #
    # @rbs (Grammar::Symbol sym) -> State
    def transition: (Grammar::Symbol sym) -> State

    # @rbs (States::Item item) -> Reduce
    def find_reduce_by_item!: (States::Item item) -> Reduce

    # @rbs (Grammar::Rule default_reduction_rule) -> void
    def default_reduction_rule=: (Grammar::Rule default_reduction_rule) -> void

    # @rbs () -> bool
    def has_conflicts?: () -> bool

    # @rbs () -> Array[conflict]
    def sr_conflicts: () -> Array[conflict]

    # @rbs () -> Array[conflict]
    def rr_conflicts: () -> Array[conflict]

    # Definition 3.40 (propagate_lookaheads)
    #
    # @rbs (State next_state) -> lookahead_set
    def propagate_lookaheads: (State next_state) -> lookahead_set

    # Definition 3.43 (is_compatible)
    #
    # @rbs (lookahead_set filtered_lookahead) -> bool
    def is_compatible?: (lookahead_set filtered_lookahead) -> bool

    # Definition 3.38 (lookahead_set_filters)
    #
    # @rbs () -> lookahead_set
    def lookahead_set_filters: () -> lookahead_set

    # Definition 3.27 (inadequacy_lists)
    #
    # @rbs () -> Hash[Grammar::Symbol, Array[Shift | Reduce]]
    def inadequacy_list: () -> Hash[Grammar::Symbol, Array[Shift | Reduce]]

    # Definition 3.30 (annotate_manifestation)
    #
    # @rbs () -> void
    def annotate_manifestation: () -> void

    # Definition 3.32 (annotate_predecessor)
    #
    # @rbs (State next_state) -> void
    def annotate_predecessor: (State next_state) -> void

    # Definition 3.31 (compute_lhs_contributions)
    #
    # @rbs (Grammar::Symbol sym, Grammar::Symbol token) -> (nil | Hash[States::Item, bool])
    def lhs_contributions: (Grammar::Symbol sym, Grammar::Symbol token) -> (nil | Hash[States::Item, bool])

    # Definition 3.26 (item_lookahead_sets)
    #
    # @rbs () -> lookahead_set
    def item_lookahead_set: () -> lookahead_set

    # @rbs (lookahead_set k) -> void
    def item_lookahead_set=: (lookahead_set k) -> void

    # @rbs (States::Item item) -> Array[[State, States::Item]]
    def predecessors_with_item: (States::Item item) -> Array[[ State, States::Item ]]

    # @rbs (State prev_state) -> void
    def append_predecessor: (State prev_state) -> void

    # Definition 3.39 (compute_goto_follow_set)
    #
    # @rbs (Grammar::Symbol nterm_token) -> Array[Grammar::Symbol]
    def goto_follow_set: (Grammar::Symbol nterm_token) -> Array[Grammar::Symbol]

    # Definition 3.24 (goto_follows, via always_follows)
    #
    # @rbs (Shift shift, State next_state) -> Array[Grammar::Symbol]
    def goto_follows: (Shift shift, State next_state) -> Array[Grammar::Symbol]

    # Definition 3.8 (Goto Follows Internal Relation)
    #
    # @rbs (Shift shift, State next_state) -> Array[goto]
    def internal_dependencies: (Shift shift, State next_state) -> Array[goto]

    # Definition 3.5 (Goto Follows Successor Relation)
    #
    # @rbs (Shift shift, State next_state) -> Array[goto]
    def successor_dependencies: (Shift shift, State next_state) -> Array[goto]

    # Definition 3.9 (Goto Follows Predecessor Relation)
    #
    # @rbs (Shift shift, State next_state) -> Array[goto]
    def predecessor_dependencies: (Shift shift, State next_state) -> Array[goto]
  end
end
