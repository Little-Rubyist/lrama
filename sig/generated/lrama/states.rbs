# Generated from lib/lrama/states.rb with RBS::Inline

module Lrama
  # States is passed to a template file
  #
  # "Efficient Computation of LALR(1) Look-Ahead Sets"
  #   https://dl.acm.org/doi/pdf/10.1145/69622.357187
  class States
    include Grammar::_DelegatedMethods

    extend Forwardable

    include Lrama::Tracer::Duration

    @grammar: untyped

    @warning: untyped

    @trace_state: untyped

    @states: Array[State]

    @direct_read_sets: untyped

    @reads_relation: untyped

    @read_sets: untyped

    @includes_relation: untyped

    @lookback_relation: untyped

    @follow_sets: untyped

    @la: untyped

    extend Forwardable

    include Lrama::Tracer::Duration

    attr_reader states: Array[State]

    attr_reader reads_relation: untyped

    attr_reader includes_relation: untyped

    attr_reader lookback_relation: untyped

    # @rbs (untyped grammar, untyped warning, ?trace_state: bool) -> void
    def initialize: (untyped grammar, untyped warning, ?trace_state: bool) -> void

    # @rbs () -> untyped
    def compute: () -> untyped

    def compute_ielr: () -> untyped

    # @rbs () -> untyped
    def states_count: () -> untyped

    # @rbs () -> untyped
    def direct_read_sets: () -> untyped

    # @rbs () -> untyped
    def read_sets: () -> untyped

    # @rbs () -> untyped
    def follow_sets: () -> untyped

    # @rbs () -> untyped
    def la: () -> untyped

    def sr_conflicts_count: () -> untyped

    def rr_conflicts_count: () -> untyped

    def validate!: (untyped logger) -> untyped

    private

    # @rbs (untyped accessing_symbol, untyped kernels, untyped states_created) -> (::Array[untyped | false] | ::Array[untyped | true])
    def create_state: (untyped accessing_symbol, untyped kernels, untyped states_created) -> (::Array[untyped | false] | ::Array[untyped | true])

    # @rbs (untyped state) -> untyped
    def setup_state: (untyped state) -> untyped

    # @rbs (untyped states, untyped state) -> untyped
    def enqueue_state: (untyped states, untyped state) -> untyped

    # @rbs () -> untyped
    def compute_lr0_states: () -> untyped

    # @rbs () -> untyped
    def nterm_transitions: () -> untyped

    # @rbs () -> untyped
    def compute_direct_read_sets: () -> untyped

    # @rbs () -> untyped
    def compute_reads_relation: () -> untyped

    # @rbs () -> untyped
    def compute_read_sets: () -> untyped

    # Execute transition of state by symbols
    # then return final state.
    #
    # @rbs (untyped state, untyped symbols) -> untyped
    def transition: (untyped state, untyped symbols) -> untyped

    # @rbs () -> untyped
    def compute_includes_relation: () -> untyped

    # @rbs () -> untyped
    def compute_lookback_relation: () -> untyped

    # @rbs () -> untyped
    def compute_follow_sets: () -> untyped

    # @rbs () -> untyped
    def compute_look_ahead_sets: () -> untyped

    # @rbs (untyped bit) -> untyped
    def bitmap_to_terms: (untyped bit) -> untyped

    # @rbs () -> untyped
    def compute_conflicts: () -> untyped

    # @rbs () -> untyped
    def compute_shift_reduce_conflicts: () -> untyped

    # @rbs () -> untyped
    def compute_reduce_reduce_conflicts: () -> untyped

    # @rbs () -> untyped
    def compute_default_reduction: () -> untyped

    # Definition 3.16 (follow_kernel_items)
    def compute_follow_kernel_items: () -> untyped

    def compute_goto_internal_relation: () -> untyped

    def compute_goto_bitmaps: () -> untyped

    # Definition 3.20 (always_follows, one closure)
    def compute_always_follows: () -> untyped

    def compute_goto_successor_or_internal_relation: () -> untyped

    def compute_transition_bitmaps: () -> untyped

    # Definition 3.8 (Goto Follows Internal Relation)
    def has_internal_relation?: (untyped goto1, untyped goto2) -> untyped

    # Definition 3.5 (Goto Follows Successor Relation)
    def has_successor_relation?: (untyped goto1, untyped goto2) -> untyped

    def split_states: () -> untyped

    def compute_inadequacy_annotations: () -> untyped

    def merge_lookaheads: (untyped state, untyped filtered_lookaheads) -> untyped

    def compute_state: (untyped state, untyped shift, untyped next_state) -> untyped

    def validate_conflicts_within_threshold!: (untyped logger) -> untyped

    def conflicts_within_threshold?: (untyped logger) -> untyped

    def sr_conflicts_within_threshold?: (untyped logger) -> untyped

    def rr_conflicts_within_threshold?: (untyped logger, ?expected: untyped) -> untyped
  end
end
