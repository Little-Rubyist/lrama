# Generated from lib/lrama/counterexamples.rb with RBS::Inline

module Lrama
  # See: https://www.cs.cornell.edu/andru/papers/cupex/cupex.pdf
  #      4. Constructing Nonunifying Counterexamples
  class Counterexamples
    @states: States

    @transitions: Hash[[ StateItem, Grammar::Symbol ], StateItem]

    @reverse_transitions: Hash[[ StateItem, Grammar::Symbol ], Set[StateItem]]

    @productions: Hash[StateItem, Set[States::Item]]

    @reverse_productions: Hash[[ State, Grammar::Symbol ], Set[States::Item]]

    attr_reader transitions: Hash[[ StateItem, Grammar::Symbol ], StateItem]

    attr_reader productions: Hash[StateItem, Set[States::Item]]

    # @rbs (States states) -> void
    def initialize: (States states) -> void

    # @rbs () -> "#<Counterexamples>"
    def to_s: () -> "#<Counterexamples>"

    alias inspect to_s

    # @rbs (State conflict_state) -> Array[Example]
    def compute: (State conflict_state) -> Array[Example]

    private

    # @rbs () -> void
    def setup_transitions: () -> void

    # @rbs () -> void
    def setup_productions: () -> void

    # @rbs (State conflict_state, State::ShiftReduceConflict conflict) -> Example
    def shift_reduce_example: (State conflict_state, State::ShiftReduceConflict conflict) -> Example

    # @rbs (State conflict_state, State::ReduceReduceConflict conflict) -> Example
    def reduce_reduce_examples: (State conflict_state, State::ReduceReduceConflict conflict) -> Example

    # @rbs (::Array[Path::path]? reduce_path, State conflict_state, States::Item conflict_item) -> ::Array[Path::path]
    def find_shift_conflict_shortest_path: (::Array[Path::path]? reduce_path, State conflict_state, States::Item conflict_item) -> ::Array[Path::path]

    # @rbs (::Array[Path::path]? reduce_path, State conflict_state, States::Item conflict_item) -> Array[StateItem]
    def find_shift_conflict_shortest_state_items: (::Array[Path::path]? reduce_path, State conflict_state, States::Item conflict_item) -> Array[StateItem]

    # @rbs (Array[StateItem] state_items) -> ::Array[Path::path]
    def build_paths_from_state_items: (Array[StateItem] state_items) -> ::Array[Path::path]

    # @rbs (StateItem target) -> Set[StateItem]
    def reachable_state_items: (StateItem target) -> Set[StateItem]

    # @rbs (State conflict_state, States::Item conflict_reduce_item, Grammar::Symbol conflict_term) -> ::Array[Path::path]?
    def shortest_path: (State conflict_state, States::Item conflict_reduce_item, Grammar::Symbol conflict_term) -> ::Array[Path::path]?

    # @rbs (States::Item item, Set[Grammar::Symbol] current_l) -> Set[Grammar::Symbol]
    def follow_l: (States::Item item, Set[Grammar::Symbol] current_l) -> Set[Grammar::Symbol]
  end
end
