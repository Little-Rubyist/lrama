#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Lrama
  class NewParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 118)

def initialize(text)
  @text = text
  @yydebug = true
end

def parse
  @lexer = Lrama::NewLexer.new(@text)
  @grammar = Lrama::Grammar.new
  @precedence_number = 0
  do_parse
  @grammar.extract_references
  @grammar.prepare
  @grammar.compute_nullable
  @grammar.validate!
  @grammar
end

def next_token
  @lexer.next_token
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    71,   110,     3,    76,   134,   106,    33,    34,     6,    33,
    34,     7,   135,   136,     8,   109,    20,    23,    24,    25,
    26,    27,    28,    29,    75,   105,    33,    34,     9,    77,
    33,    34,    14,    31,    12,    40,    13,    15,    16,    17,
    18,   119,    43,    19,    20,    23,    24,    25,    26,    27,
    28,    29,   119,    45,    33,    34,    33,    34,   120,   134,
    45,    33,    34,    33,    34,    33,    34,   135,   136,   120,
    20,    23,    24,    25,    26,    27,    28,    29,    33,    34,
    33,    34,    53,    45,    33,    34,    58,    48,    33,    34,
    63,    49,    33,    34,    63,    50,    33,    34,    63,    68,
    33,    34,    33,    34,    33,    34,    33,    34,    33,    34,
    33,    34,    33,    34,    33,    34,    33,    34,    33,    34,
    33,    34,    33,    34,    33,    34,    33,    34,    33,    34,
    72,    73,    78,    78,    78,    83,    87,    99,   100,   101,
   102,   107,   108,   112,   122,   123,   124,   125,   129,   137,
   140 ]

racc_action_check = [
    32,    96,     1,    41,   125,    86,   125,   125,     2,    13,
    13,     2,   125,   125,     3,    96,    32,    32,    32,    32,
    32,    32,    32,    32,    41,    86,    32,    32,     4,    41,
    52,    52,     4,     7,     4,    12,     4,     4,     4,     4,
     4,   111,    14,     4,     4,     4,     4,     4,     4,     4,
     4,     4,   126,    15,   111,   111,    53,    53,   111,   130,
    16,   130,   130,    56,    56,   126,   126,   130,   130,   126,
     9,     9,     9,     9,     9,     9,     9,     9,    57,    57,
     9,     9,    25,    17,    25,    25,    26,    18,    26,    26,
    27,    20,    27,    27,    28,    22,    28,    28,    29,    30,
    29,    29,    58,    58,    61,    61,    62,    62,    63,    63,
    66,    66,    67,    67,    83,    83,    85,    85,    88,    88,
    90,    90,    91,    91,    93,    93,   103,   103,   120,   120,
    37,    38,    44,    46,    47,    51,    55,    79,    80,    81,
    82,    94,    95,    98,   113,   114,   115,   116,   121,   127,
   139 ]

racc_action_pointer = [
   nil,     2,     5,    14,    26,   nil,   nil,    26,   nil,    52,
   nil,   nil,    26,   -19,    35,    38,    45,    68,    72,   nil,
    76,   nil,    80,   nil,   nil,    56,    60,    64,    68,    72,
    95,   nil,    -2,   nil,   nil,   nil,   nil,   113,   101,   nil,
   nil,    -4,   nil,   nil,   117,   nil,   118,   119,   nil,   nil,
   nil,   109,     2,    28,   nil,   127,    35,    50,    74,   nil,
   nil,    76,    78,    80,   nil,   nil,    82,    84,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   133,
   134,   135,   136,    86,   nil,    88,    -2,   nil,    90,   nil,
    92,    94,   nil,    96,   136,   138,   -16,   nil,   139,   nil,
   nil,   nil,   nil,    98,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   128,   129,   130,   131,   nil,   nil,   nil,
   100,   132,   nil,   nil,   nil,   -22,    37,   145,   nil,   nil,
    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,
   nil ]

racc_action_default = [
    -2,   -98,    -8,   -98,   -98,    -3,    -4,   -98,   141,   -98,
    -9,   -10,   -98,   -98,   -98,   -98,   -98,   -98,   -98,   -20,
   -98,   -24,   -98,   -28,   -29,   -98,   -98,   -98,   -98,   -98,
   -98,    -7,   -83,   -64,   -65,   -66,   -68,   -98,   -98,   -82,
   -11,   -87,   -86,   -13,   -14,   -55,   -15,   -16,   -17,   -21,
   -25,   -30,   -35,   -98,   -38,   -41,   -31,   -46,   -98,   -49,
   -51,   -32,   -58,   -98,   -61,   -63,   -33,   -34,    -5,    -1,
   -67,   -84,   -69,   -71,   -12,   -88,   -89,   -90,   -52,   -98,
   -98,   -98,   -98,   -98,   -39,   -36,   -43,   -42,   -48,   -50,
   -47,   -60,   -62,   -59,   -98,   -98,   -70,   -76,   -98,   -56,
   -18,   -22,   -26,   -37,   -40,   -44,   -45,    -6,   -85,   -73,
   -75,   -72,   -53,   -98,   -98,   -98,   -98,   -76,   -77,   -78,
   -98,   -98,   -57,   -19,   -23,   -98,   -74,   -98,   -81,   -54,
   -27,   -91,   -93,   -94,   -95,   -96,   -97,   -79,   -92,   -98,
   -80 ]

racc_goto_table = [
    39,    52,    89,    92,    42,    35,    57,   111,    91,    84,
    93,     1,   131,    91,    91,     2,    55,   138,    65,    65,
    65,     4,    32,    39,    44,    46,    47,   126,    70,    85,
    69,     5,    92,    89,    92,    89,    88,    30,    90,    61,
    66,    67,    84,    55,    55,    94,    10,    11,    41,    74,
    80,   114,    65,    65,    65,   130,   118,    65,    65,   103,
    84,    81,   115,    82,   116,   128,    51,    56,    86,   104,
   132,   118,    98,   121,    55,   132,    55,    79,   113,    96,
    97,   117,    65,   127,    65,   139,    95,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55 ]

racc_goto_check = [
    28,    26,    32,    38,    28,    39,    31,    43,    37,    27,
    37,     1,    49,    37,    37,     2,    28,    49,    28,    28,
    28,     3,     4,    28,    13,    13,    13,    43,    39,    26,
     5,     6,    38,    32,    38,    32,    31,     7,    31,    25,
    25,    25,    27,    28,    28,     8,     9,    10,    11,    12,
    14,    15,    28,    28,    28,    18,    32,    28,    28,    26,
    27,    19,    20,    21,    22,    32,    23,    24,    29,    30,
    32,    32,    33,    34,    28,    32,    28,    35,    36,    42,
    44,    45,    28,    46,    28,    47,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28 ]

racc_goto_pointer = [
   nil,    11,    15,    19,    13,    -2,    29,    31,   -23,    42,
    43,    35,     8,     9,     2,   -49,   nil,   nil,   -70,    12,
   -39,    13,   -38,    41,    41,    12,   -24,   -43,    -9,    13,
   -17,   -20,   -55,    -6,   -39,    32,   -21,   -53,   -59,    -4,
   nil,   nil,     6,   -90,     7,   -28,   -36,   -52,    15,  -113,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,    21,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,    60,   nil,
   nil,   nil,    59,   nil,   nil,   nil,   nil,    62,    64,   nil,
    36,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   133 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 37, :_reduce_none,
  0, 38, :_reduce_none,
  2, 38, :_reduce_none,
  0, 43, :_reduce_4,
  0, 44, :_reduce_5,
  5, 42, :_reduce_6,
  2, 42, :_reduce_none,
  0, 39, :_reduce_8,
  2, 39, :_reduce_none,
  1, 45, :_reduce_none,
  2, 45, :_reduce_none,
  3, 45, :_reduce_none,
  2, 45, :_reduce_none,
  2, 45, :_reduce_none,
  2, 45, :_reduce_none,
  2, 45, :_reduce_16,
  0, 50, :_reduce_17,
  0, 51, :_reduce_18,
  6, 45, :_reduce_none,
  1, 45, :_reduce_none,
  0, 55, :_reduce_21,
  0, 56, :_reduce_22,
  6, 46, :_reduce_23,
  1, 46, :_reduce_none,
  0, 57, :_reduce_25,
  0, 58, :_reduce_26,
  7, 46, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  2, 52, :_reduce_none,
  2, 52, :_reduce_31,
  2, 52, :_reduce_32,
  2, 52, :_reduce_33,
  2, 52, :_reduce_none,
  1, 59, :_reduce_35,
  2, 59, :_reduce_36,
  3, 59, :_reduce_37,
  1, 62, :_reduce_38,
  2, 62, :_reduce_39,
  3, 63, :_reduce_40,
  0, 65, :_reduce_none,
  1, 65, :_reduce_42,
  0, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 60, :_reduce_46,
  2, 60, :_reduce_47,
  2, 60, :_reduce_48,
  1, 67, :_reduce_49,
  2, 67, :_reduce_50,
  1, 68, :_reduce_none,
  0, 69, :_reduce_52,
  0, 70, :_reduce_53,
  6, 49, :_reduce_54,
  0, 71, :_reduce_55,
  0, 72, :_reduce_56,
  5, 49, :_reduce_57,
  1, 61, :_reduce_58,
  2, 61, :_reduce_59,
  2, 61, :_reduce_60,
  1, 73, :_reduce_61,
  2, 73, :_reduce_62,
  1, 74, :_reduce_none,
  1, 64, :_reduce_64,
  1, 64, :_reduce_65,
  1, 40, :_reduce_none,
  2, 40, :_reduce_none,
  1, 75, :_reduce_none,
  2, 75, :_reduce_none,
  3, 76, :_reduce_70,
  0, 80, :_reduce_71,
  2, 78, :_reduce_72,
  0, 81, :_reduce_73,
  4, 78, :_reduce_74,
  2, 78, :_reduce_none,
  0, 79, :_reduce_76,
  2, 79, :_reduce_77,
  0, 82, :_reduce_78,
  0, 83, :_reduce_79,
  6, 79, :_reduce_80,
  3, 79, :_reduce_none,
  1, 77, :_reduce_none,
  0, 41, :_reduce_none,
  0, 84, :_reduce_84,
  3, 41, :_reduce_85,
  1, 47, :_reduce_none,
  0, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 54, :_reduce_none,
  2, 54, :_reduce_none,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none ]

racc_reduce_n = 98

racc_shift_n = 141

racc_token_table = {
  false => 0,
  :error => 1,
  "%%" => 2,
  "%{" => 3,
  :C_DECLARATION => 4,
  "%}" => 5,
  "%require" => 6,
  :STRING => 7,
  "%expect" => 8,
  :INTEGER => 9,
  "%define" => 10,
  "%param" => 11,
  "%lex-param" => 12,
  "%parse-param" => 13,
  "%initial-action" => 14,
  "{" => 15,
  "}" => 16,
  ";" => 17,
  "%union" => 18,
  "%destructor" => 19,
  "%printer" => 20,
  "%token" => 21,
  "%type" => 22,
  "%left" => 23,
  "%right" => 24,
  "%nonassoc" => 25,
  :TAG => 26,
  :string_as_id => 27,
  :IDENTIFIER => 28,
  :CHARACTER => 29,
  ":" => 30,
  "|" => 31,
  "%prec" => 32,
  "{...}" => 33,
  "<*>" => 34,
  "<>" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"%%\"",
  "\"%{\"",
  "C_DECLARATION",
  "\"%}\"",
  "\"%require\"",
  "STRING",
  "\"%expect\"",
  "INTEGER",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%initial-action\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%token\"",
  "\"%type\"",
  "\"%left\"",
  "\"%right\"",
  "\"%nonassoc\"",
  "TAG",
  "string_as_id",
  "IDENTIFIER",
  "CHARACTER",
  "\":\"",
  "\"|\"",
  "\"%prec\"",
  "\"{...}\"",
  "\"<*>\"",
  "\"<>\"",
  "$start",
  "input",
  "prologue_declarations",
  "bison_declarations",
  "grammar",
  "epilogue_opt",
  "prologue_declaration",
  "@1",
  "@2",
  "bison_declaration",
  "grammar_declaration",
  "variable",
  "value",
  "params",
  "@3",
  "@4",
  "symbol_declaration",
  "code_props_type",
  "generic_symlist",
  "@5",
  "@6",
  "@7",
  "@8",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "token_declaration_list",
  "token_declaration",
  "id",
  "int_opt",
  "alias",
  "symbol_declaration_list",
  "symbol",
  "@9",
  "@10",
  "@11",
  "@12",
  "token_declaration_list_for_precedence",
  "token_declaration_for_precedence",
  "rules_or_grammar_declaration",
  "rules",
  "id_colon",
  "rhs_list",
  "rhs",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "generic_symlist_item",
  "tag" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '%}'; @grammar.prologue_first_lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_6(val, _values, result)
     @grammar.prologue = val[2]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_8(val, _values, result)
     result = ""
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_16(val, _values, result)
     val[1].each {|token| token.references = []; @grammar.parse_param = @grammar.build_code(:parse_param, token).token_code.s_value}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_17(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_18(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_21(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'; @lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_22(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_23(val, _values, result)
     token = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: "{#{val[3]}}"); token.references = []; @grammar.set_union(@grammar.build_code(:union, token), @lineno)
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_25(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_26(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_31(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| @grammar.add_type(id: id, tag: hash[:tag]) } }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_32(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_left(sym, @precedence_number) }; @precedence_number += 1 }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_33(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_right(sym, @precedence_number) }; @precedence_number += 1 }
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_35(val, _values, result)
     val[0].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: nil, replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_36(val, _values, result)
     val[1].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_37(val, _values, result)
     val[2].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[1]), replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_38(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_39(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_40(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_42(val, _values, result)
     result = Integer(val[0])
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_46(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_47(val, _values, result)
     result = [{tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_48(val, _values, result)
     result = val[0].append({tag: nil, tokens: val[1]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_49(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_50(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_52(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_53(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_54(val, _values, result)
     result = val[0].append(Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_55(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_56(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_57(val, _values, result)
     result = [Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[2])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_58(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_59(val, _values, result)
     result = [{tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_60(val, _values, result)
     result = val[0].concat({tag: nil, tokens: val[1]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_61(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_62(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_64(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Ident, s_value: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_65(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Char, s_value: val[0])
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_70(val, _values, result)
     val[2].each {|hash| @grammar.add_rule(lhs: val[0], rhs: hash[:rhs], lineno: hash[:lineno]) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_71(val, _values, result)
     @lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_72(val, _values, result)
     result = [{rhs: val[1], lineno: @lineno}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_73(val, _values, result)
     @lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_74(val, _values, result)
     result = val[0].append({rhs: val[3], lineno: @lineno})
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_76(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_77(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_78(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_79(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_80(val, _values, result)
     result = val[0].append(Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[1..5].join))
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_84(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '\Z'; @grammar.epilogue_first_lineno = @lexer.line + 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_85(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil; @grammar.epilogue = val[2]
    result
  end
.,.,

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class NewParser
end   # module Lrama
