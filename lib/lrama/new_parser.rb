#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Lrama
  class NewParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 121)

def initialize(text)
  @text = text
  @yydebug = true
  @lineno = []
end

def parse
  @lexer = Lrama::NewLexer.new(@text)
  @grammar = Lrama::Grammar.new
  @precedence_number = 0
  do_parse
  @grammar.extract_references
  @grammar.prepare
  @grammar.compute_nullable
  @grammar.validate!
  @grammar
end

def next_token
  @lexer.next_token
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    77,   133,   109,   133,     6,   122,    53,     7,    32,    33,
    32,    33,     3,    71,    32,    33,    32,    33,   134,   121,
   134,    76,   108,    58,     8,    32,    33,    30,    78,    20,
    22,    23,    24,    25,    26,    27,    28,     9,    39,    32,
    33,    14,    42,    12,    44,    13,    15,    16,    17,    18,
    32,    33,    19,    20,    22,    23,    24,    25,    26,    27,
    28,    20,    22,    23,    24,    25,    26,    27,    28,    32,
    33,    32,    33,   141,    44,    32,    33,   141,    44,    32,
    33,    32,    33,   142,   143,    32,    33,   142,   143,   141,
    47,    32,    33,   141,    48,    32,    33,    32,    33,   142,
   143,    32,    33,   142,   143,    63,    49,    32,    33,    63,
    50,    32,    33,    63,    68,    32,    33,    32,    33,    32,
    33,    32,    33,    32,    33,    32,    33,    32,    33,    32,
    33,    32,    33,    32,    33,    32,    33,    32,    33,    32,
    33,    72,    74,    79,    79,    79,    85,    89,    98,    99,
   101,   102,   103,   104,   105,   110,   111,   114,   115,   124,
   126,   127,   128,   129,   130,   136,   124,    74,   149,   151,
   154,   155,    74,    74 ]

racc_action_check = [
    40,   123,    88,   145,     2,   112,    24,     2,    24,    24,
    13,    13,     1,    31,   123,   123,   145,   145,   123,   112,
   145,    40,    88,    25,     3,    25,    25,     7,    40,    31,
    31,    31,    31,    31,    31,    31,    31,     4,    12,    31,
    31,     4,    14,     4,    15,     4,     4,     4,     4,     4,
    52,    52,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     9,     9,     9,     9,     9,     9,     9,     9,    53,
    53,     9,     9,   129,    16,   129,   129,   130,    17,   130,
   130,    56,    56,   129,   129,    57,    57,   130,   130,   137,
    18,   137,   137,   144,    20,   144,   144,    58,    58,   137,
   137,    61,    61,   144,   144,    26,    22,    26,    26,    27,
    23,    27,    27,    28,    29,    28,    28,    62,    62,    63,
    63,    66,    66,    67,    67,    85,    85,    87,    87,    90,
    90,    92,    92,    93,    93,    95,    95,   106,   106,   134,
   134,    36,    37,    43,    45,    46,    51,    55,    73,    74,
    80,    81,    82,    83,    84,    96,    97,    99,   100,   113,
   116,   117,   118,   119,   120,   125,   131,   132,   135,   147,
   152,   153,   154,   155 ]

racc_action_pointer = [
   nil,    12,     1,    24,    35,   nil,   nil,    20,   nil,    43,
   nil,   nil,    29,   -18,    35,    29,    59,    63,    75,   nil,
    79,   nil,    91,    95,   -20,    -3,    79,    83,    87,   110,
   nil,    11,   nil,   nil,   nil,   nil,   124,   109,   nil,   nil,
    -7,   nil,   nil,   128,   nil,   129,   130,   nil,   nil,   nil,
   nil,   120,    22,    41,   nil,   138,    53,    57,    69,   nil,
   nil,    73,    89,    91,   nil,   nil,    93,    95,   nil,   nil,
   nil,   nil,   nil,   118,   121,   nil,   nil,   nil,   nil,   nil,
   146,   147,   148,   149,   150,    97,   nil,    99,    -5,   nil,
   101,   nil,   103,   105,   nil,   107,   150,   152,   nil,   123,
   154,   nil,   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,
   nil,   nil,   -12,   144,   nil,   nil,   144,   145,   146,   147,
   148,   nil,   nil,   -14,   nil,   149,   nil,   nil,   nil,    47,
    51,   151,   134,   nil,   111,   164,   nil,    63,   nil,   nil,
   nil,   nil,   nil,   nil,    67,   -12,   nil,   165,   nil,   nil,
   nil,   nil,   154,   155,   139,   140,   nil,   nil ]

racc_action_default = [
    -2,  -104,    -8,  -104,  -104,    -3,    -4,  -104,   158,  -104,
    -9,   -10,  -104,  -104,  -104,  -104,  -104,  -104,  -104,   -20,
  -104,   -24,  -104,  -104,  -104,  -104,  -104,  -104,  -104,  -104,
    -7,   -89,   -65,   -66,   -67,   -69,  -104,   -86,   -88,   -11,
   -93,   -92,   -13,   -14,   -56,   -15,   -16,   -17,   -21,   -25,
   -28,   -31,   -36,  -104,   -39,   -42,   -32,   -47,  -104,   -50,
   -52,   -33,   -59,  -104,   -62,   -64,   -34,   -35,    -5,    -1,
   -68,   -90,   -70,  -104,  -104,   -12,   -94,   -95,   -96,   -53,
  -104,  -104,  -104,  -104,  -104,  -104,   -40,   -37,   -44,   -43,
   -49,   -51,   -48,   -61,   -63,   -60,  -104,  -104,   -72,  -104,
  -104,   -57,   -18,   -22,   -26,   -29,   -38,   -41,   -45,   -46,
    -6,   -91,   -71,   -77,   -87,   -54,  -104,  -104,  -104,  -104,
  -104,   -74,   -76,   -73,   -82,  -104,   -58,   -19,   -23,  -104,
  -104,   -77,   -86,   -79,  -104,  -104,   -55,   -27,   -97,   -99,
  -100,  -101,  -102,  -103,   -30,   -75,   -78,  -104,   -85,   -83,
   -98,   -80,  -104,  -104,   -86,   -86,   -84,   -81 ]

racc_goto_table = [
    59,    73,    38,    86,    57,    52,    41,    34,    94,   123,
    93,   150,    95,   137,   144,    93,    93,    55,   150,    65,
    65,    65,     1,     2,    38,     4,    31,   145,    69,    70,
     5,    59,    91,    59,    87,    90,    29,    92,    86,    94,
    96,    94,    43,    45,    46,    55,    55,    61,    66,    67,
    10,    11,    40,    75,    65,    65,    65,    86,    81,    65,
    65,   117,    82,   118,    83,    91,   106,    91,   119,    84,
   120,    51,    56,    88,   107,   100,   125,    80,    55,   116,
    55,   112,   113,   131,   147,   153,    65,   135,    65,   152,
    97,   nil,   nil,   nil,   nil,   nil,   146,   nil,   132,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   156,   157,
   132 ]

racc_goto_check = [
    33,    43,    29,    28,    32,    27,    29,    40,    39,    45,
    38,    53,    38,    17,    17,    38,    38,    29,    53,    29,
    29,    29,     1,     2,    29,     3,     4,    45,     5,    40,
     6,    33,    33,    33,    27,    32,     7,    32,    28,    39,
     8,    39,    13,    13,    13,    29,    29,    26,    26,    26,
     9,    10,    11,    12,    29,    29,    29,    28,    14,    29,
    29,    15,    18,    19,    20,    33,    27,    33,    21,    22,
    23,    24,    25,    30,    31,    34,    35,    36,    29,    37,
    29,    44,    46,    47,    48,    49,    29,    50,    29,    51,
    52,   nil,   nil,   nil,   nil,   nil,    43,   nil,    33,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    43,
    33 ]

racc_goto_pointer = [
   nil,    22,    23,    23,    17,    -3,    28,    30,   -28,    46,
    47,    39,    13,    27,    11,   -41,   nil,  -116,    14,   -40,
    15,   -36,    19,   -35,    47,    47,    21,   -19,   -49,    -7,
    18,   -14,   -21,   -25,    -4,   -39,    33,   -22,   -51,   -54,
    -2,   nil,   nil,   -36,   -17,  -104,   -16,   -38,   -49,   -66,
   -37,   -60,    19,  -126,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,    60,
   nil,   nil,   nil,   139,   nil,   nil,   nil,   nil,    62,    64,
   nil,    35,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   138,   140 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 39, :_reduce_none,
  0, 40, :_reduce_none,
  2, 40, :_reduce_none,
  0, 45, :_reduce_4,
  0, 46, :_reduce_5,
  5, 44, :_reduce_6,
  2, 44, :_reduce_none,
  0, 41, :_reduce_8,
  2, 41, :_reduce_none,
  1, 47, :_reduce_none,
  2, 47, :_reduce_none,
  3, 47, :_reduce_none,
  2, 47, :_reduce_none,
  2, 47, :_reduce_none,
  2, 47, :_reduce_none,
  2, 47, :_reduce_16,
  0, 52, :_reduce_17,
  0, 53, :_reduce_18,
  6, 47, :_reduce_none,
  1, 47, :_reduce_none,
  0, 56, :_reduce_21,
  0, 57, :_reduce_22,
  6, 48, :_reduce_23,
  1, 48, :_reduce_none,
  0, 58, :_reduce_25,
  0, 59, :_reduce_26,
  7, 48, :_reduce_none,
  0, 60, :_reduce_28,
  0, 61, :_reduce_29,
  7, 48, :_reduce_30,
  2, 54, :_reduce_none,
  2, 54, :_reduce_32,
  2, 54, :_reduce_33,
  2, 54, :_reduce_34,
  2, 54, :_reduce_35,
  1, 62, :_reduce_36,
  2, 62, :_reduce_37,
  3, 62, :_reduce_38,
  1, 65, :_reduce_39,
  2, 65, :_reduce_40,
  3, 66, :_reduce_41,
  0, 68, :_reduce_none,
  1, 68, :_reduce_43,
  0, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_46,
  1, 63, :_reduce_47,
  2, 63, :_reduce_48,
  2, 63, :_reduce_49,
  1, 70, :_reduce_50,
  2, 70, :_reduce_51,
  1, 71, :_reduce_none,
  0, 72, :_reduce_53,
  0, 73, :_reduce_54,
  6, 51, :_reduce_55,
  0, 74, :_reduce_56,
  0, 75, :_reduce_57,
  5, 51, :_reduce_58,
  1, 64, :_reduce_59,
  2, 64, :_reduce_60,
  2, 64, :_reduce_61,
  1, 76, :_reduce_62,
  2, 76, :_reduce_63,
  1, 77, :_reduce_none,
  1, 67, :_reduce_65,
  1, 67, :_reduce_66,
  1, 42, :_reduce_none,
  2, 42, :_reduce_none,
  1, 78, :_reduce_none,
  2, 78, :_reduce_none,
  4, 79, :_reduce_71,
  0, 84, :_reduce_72,
  2, 82, :_reduce_73,
  0, 85, :_reduce_74,
  4, 82, :_reduce_75,
  2, 82, :_reduce_none,
  0, 83, :_reduce_77,
  3, 83, :_reduce_78,
  0, 86, :_reduce_79,
  0, 87, :_reduce_80,
  7, 83, :_reduce_81,
  0, 88, :_reduce_82,
  0, 89, :_reduce_83,
  6, 83, :_reduce_84,
  3, 83, :_reduce_85,
  0, 81, :_reduce_none,
  3, 81, :_reduce_87,
  1, 80, :_reduce_none,
  0, 43, :_reduce_none,
  0, 90, :_reduce_90,
  3, 43, :_reduce_91,
  1, 49, :_reduce_none,
  0, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 55, :_reduce_97,
  2, 55, :_reduce_98,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_101,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none ]

racc_reduce_n = 104

racc_shift_n = 158

racc_token_table = {
  false => 0,
  :error => 1,
  "%%" => 2,
  "%{" => 3,
  :C_DECLARATION => 4,
  "%}" => 5,
  "%require" => 6,
  :STRING => 7,
  "%expect" => 8,
  :INTEGER => 9,
  "%define" => 10,
  "%param" => 11,
  "%lex-param" => 12,
  "%parse-param" => 13,
  "%initial-action" => 14,
  "{" => 15,
  "}" => 16,
  ";" => 17,
  "%union" => 18,
  "%destructor" => 19,
  "%printer" => 20,
  "%token" => 21,
  "%type" => 22,
  "%left" => 23,
  "%right" => 24,
  "%nonassoc" => 25,
  :TAG => 26,
  :string_as_id => 27,
  :IDENTIFIER => 28,
  :CHARACTER => 29,
  ":" => 30,
  "|" => 31,
  "%prec" => 32,
  "[" => 33,
  "]" => 34,
  "{...}" => 35,
  "<*>" => 36,
  "<>" => 37 }

racc_nt_base = 38

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"%%\"",
  "\"%{\"",
  "C_DECLARATION",
  "\"%}\"",
  "\"%require\"",
  "STRING",
  "\"%expect\"",
  "INTEGER",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%initial-action\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%token\"",
  "\"%type\"",
  "\"%left\"",
  "\"%right\"",
  "\"%nonassoc\"",
  "TAG",
  "string_as_id",
  "IDENTIFIER",
  "CHARACTER",
  "\":\"",
  "\"|\"",
  "\"%prec\"",
  "\"[\"",
  "\"]\"",
  "\"{...}\"",
  "\"<*>\"",
  "\"<>\"",
  "$start",
  "input",
  "prologue_declarations",
  "bison_declarations",
  "grammar",
  "epilogue_opt",
  "prologue_declaration",
  "@1",
  "@2",
  "bison_declaration",
  "grammar_declaration",
  "variable",
  "value",
  "params",
  "@3",
  "@4",
  "symbol_declaration",
  "generic_symlist",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "token_declaration_list",
  "token_declaration",
  "id",
  "int_opt",
  "alias",
  "symbol_declaration_list",
  "symbol",
  "@11",
  "@12",
  "@13",
  "@14",
  "token_declaration_list_for_precedence",
  "token_declaration_for_precedence",
  "rules_or_grammar_declaration",
  "rules",
  "id_colon",
  "named_ref_opt",
  "rhs_list",
  "rhs",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "generic_symlist_item",
  "tag" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '%}'; @grammar.prologue_first_lineno = @lexer.line
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_6(val, _values, result)
     @grammar.prologue = val[2]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_8(val, _values, result)
     result = ""
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_16(val, _values, result)
     val[1].each {|token| token.references = []; @grammar.parse_param = @grammar.build_code(:parse_param, token).token_code.s_value}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_17(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_18(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_21(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_22(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_23(val, _values, result)
     token = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: "{#{val[3]}}"); lineno = @lineno.pop; token.line = lineno; token.references = []; @grammar.set_union(@grammar.build_code(:union, token), lineno)
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_25(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_26(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_28(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_29(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_30(val, _values, result)
     user_code = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: "{#{val[3]}}"); lineno = @lineno.pop; user_code.line = lineno; user_code.references = []; code = @grammar.build_code(:printer, user_code); @grammar.add_printer(ident_or_tags: val[6], code: code, lineno: lineno)
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_32(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| @grammar.add_type(id: id, tag: hash[:tag]) } }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_33(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_left(sym, @precedence_number) }; @precedence_number += 1 }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_34(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_right(sym, @precedence_number) }; @precedence_number += 1 }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_35(val, _values, result)
     val[1].each {|hash| hash[:tokens].each {|id| sym = @grammar.add_term(id: id); @grammar.add_nonassoc(sym, @precedence_number) }; @precedence_number += 1 }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_36(val, _values, result)
     val[0].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: nil, replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_37(val, _values, result)
     val[1].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_38(val, _values, result)
     val[2].each {|token_declaration| @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[1]), replace: true) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_39(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_40(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_41(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_43(val, _values, result)
     result = Integer(val[0])
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_46(val, _values, result)
     result = %Q("#{val[0]}")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_47(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_48(val, _values, result)
     result = [{tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_49(val, _values, result)
     result = val[0].append({tag: nil, tokens: val[1]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_50(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_51(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_53(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_54(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_55(val, _values, result)
     result = val[0].append(Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[3])); result.last.line = @lineno.pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_56(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_57(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_58(val, _values, result)
     result = [Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[2])]; result.last.line = @lineno.pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_59(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_60(val, _values, result)
     result = [{tag: Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0]), tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_61(val, _values, result)
     result = val[0].concat({tag: nil, tokens: val[1]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_62(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_63(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_65(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Ident, s_value: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_66(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Char, s_value: val[0])
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_71(val, _values, result)
     lhs = val[0]; lhs.alias = val[1]; val[3].each {|hash| @grammar.add_rule(lhs: lhs, rhs: hash[:rhs], lineno: hash[:lineno]) }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_72(val, _values, result)
     @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_73(val, _values, result)
     result = [{rhs: val[1], lineno: @lineno.pop}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_74(val, _values, result)
     @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_75(val, _values, result)
     result = val[0].append({rhs: val[3], lineno: @lineno.pop})
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_77(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_78(val, _values, result)
     token = val[1]; val[1].alias = val[2]; result = val[0].append(token)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_79(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '}'; @lineno.push(@lexer.line)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_80(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_81(val, _values, result)
     token = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[1..5].join); token.line = @lineno.pop; token.alias = val[6]; result = val[0].append(token)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_82(val, _values, result)
    @lineno.push(@lexer.line); @lexer.status = :c_declaration; @lexer.end_symbol = '}'
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_83(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_84(val, _values, result)
     token = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::User_code, s_value: val[0..4].join); token.line = @lineno.pop; token.alias = val[5]; result = [token]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_85(val, _values, result)
     sym = @grammar.find_symbol_by_id!(val[2]); result = val[0].append(sym)
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_87(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_90(val, _values, result)
    @lexer.status = :c_declaration; @lexer.end_symbol = '\Z'; @grammar.epilogue_first_lineno = @lexer.line + 1
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_91(val, _values, result)
    @lexer.status = :initial; @lexer.end_symbol = nil; @grammar.epilogue = val[2]
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.y', 107)
  def _reduce_97(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_98(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_101(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Tag, s_value: val[0])
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class NewParser
end   # module Lrama
