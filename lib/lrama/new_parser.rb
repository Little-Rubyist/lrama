#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Lrama
  class NewParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 364)

def initialize(text)
  @text = text
end

def parse
  @lexer = Lrama::NewLexer.new(@text)
  @grammar = Lrama::Grammar.new
  @precedence_number = 0
  do_parse
  @grammar.extract_references
  @grammar.prepare
  @grammar.compute_nullable
  @grammar.validate!
  @grammar
end

def next_token
  @lexer.next_token
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    75,   131,    40,    41,     6,    81,    64,     7,    55,    40,
    41,    67,    40,    41,   133,   130,    20,    22,    23,    24,
    25,    26,    27,    28,    29,    64,    80,    40,    41,    64,
     3,   134,     8,    37,    82,    40,    41,   133,    67,    40,
    41,    64,    67,    40,    41,    60,    40,    41,    31,     9,
    40,    41,    38,    14,   134,    12,    64,    13,    15,    16,
    17,    18,    40,    41,    19,    20,    22,    23,    24,    25,
    26,    27,    28,    29,    64,    43,    64,    40,    41,    64,
    45,    64,    40,    41,    64,    40,    41,    64,    40,    41,
    64,    40,    41,    64,    45,    40,    41,    40,    41,    64,
    40,    41,    40,    41,   152,    40,    41,   152,    40,    41,
   152,    40,    41,   152,    40,    41,    64,    40,    41,   152,
    40,    41,    20,    22,    23,    24,    25,    26,    27,    28,
    29,    40,    41,    40,    41,    45,   152,    40,    41,    37,
    40,    41,    40,    41,    40,    41,    40,    41,    48,    49,
    50,    51,    52,    72,    76,    78,    83,    83,    83,    90,
    94,    95,   103,   104,   106,   107,   108,   109,   110,   111,
   115,   117,   118,   121,   122,   123,   137,   138,   139,   140,
   141,   142,   121,    78,   147,   148,   155,   159,   160,    78,
    78 ]

racc_action_check = [
    32,   119,    13,    13,     2,    39,   120,     2,    25,    25,
    25,    27,    27,    27,   120,   119,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    26,    39,   120,   120,   143,
     1,   120,     3,    32,    39,    54,    54,   143,    28,    28,
    28,    59,    29,    29,    29,    26,    26,    26,     7,     4,
   143,   143,    12,     4,   143,     4,    60,     4,     4,     4,
     4,     4,    59,    59,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,    95,    14,    97,    60,    60,   116,
    15,   134,    55,    55,   140,    65,    65,   141,    66,    66,
   142,    67,    67,   149,    16,    95,    95,    97,    97,   153,
   116,   116,   134,   134,   140,   140,   140,   141,   141,   141,
   142,   142,   142,   149,   149,   149,   154,    70,    70,   153,
   153,   153,     9,     9,     9,     9,     9,     9,     9,     9,
     9,    71,    71,    90,    90,    17,   154,   154,   154,     9,
    92,    92,    98,    98,   100,   100,   112,   112,    18,    20,
    22,    23,    24,    30,    35,    36,    44,    46,    47,    53,
    57,    58,    77,    78,    84,    85,    86,    87,    88,    89,
    93,   101,   102,   103,   104,   105,   124,   125,   126,   127,
   128,   129,   130,   132,   135,   136,   145,   156,   158,   159,
   160 ]

racc_action_pointer = [
   nil,    30,     1,    32,    47,   nil,   nil,    41,   nil,   104,
   nil,   nil,    43,   -26,    68,    65,    79,   120,   133,   nil,
   134,   nil,   135,   136,   137,   -19,    18,   -16,    11,    15,
   149,   nil,    -2,   nil,   nil,   137,   122,   nil,   nil,    -2,
   nil,   nil,   nil,   nil,   141,   nil,   142,   143,   nil,   nil,
   nil,   nil,   nil,   132,     7,    54,   nil,   151,   134,    34,
    49,   nil,   nil,   nil,   nil,    57,    60,    63,   nil,   nil,
    89,   103,   nil,   nil,   nil,   nil,   nil,   132,   135,   nil,
   nil,   nil,   nil,   nil,   160,   161,   162,   163,   164,   165,
   105,   nil,   112,   163,   nil,    67,   nil,    69,   114,   nil,
   116,   166,   168,   158,   140,   171,   nil,   nil,   nil,   nil,
   nil,   nil,   118,   nil,   nil,   nil,    72,   nil,   nil,   -16,
    -1,   nil,   nil,   nil,   160,   161,   162,   163,   164,   165,
   167,   nil,   150,   nil,    74,   180,   169,   nil,   nil,   nil,
    77,    80,    83,    22,   nil,   182,   nil,   nil,   nil,    86,
   nil,   nil,   nil,    92,   109,   nil,   171,   nil,   172,   156,
   157,   nil,   nil ]

racc_action_default = [
    -2,  -104,    -8,  -104,  -104,    -3,    -4,  -104,   163,  -104,
    -9,   -10,  -104,  -104,  -104,  -104,  -104,  -104,  -104,   -20,
  -104,   -24,  -104,  -104,  -104,  -104,  -104,  -104,  -104,  -104,
  -104,    -7,   -91,   -71,   -73,  -104,   -88,   -90,   -11,   -95,
   -69,   -70,   -94,   -13,   -14,   -60,   -15,   -16,   -17,   -21,
   -25,   -28,   -31,   -34,   -39,  -104,   -42,   -45,   -35,   -50,
  -104,   -53,   -55,   -56,  -103,   -36,   -63,  -104,   -66,   -68,
   -37,   -38,    -5,    -1,   -72,   -92,   -74,  -104,  -104,   -12,
   -96,   -97,   -98,   -57,  -104,  -104,  -104,  -104,  -104,  -104,
  -104,   -43,   -40,   -47,   -46,  -104,   -54,   -51,   -65,   -67,
   -64,  -104,  -104,   -79,  -104,  -104,   -61,   -18,   -22,   -26,
   -29,   -32,   -41,   -44,   -48,   -49,   -52,    -6,   -93,   -75,
   -76,   -84,   -89,   -58,  -104,  -104,  -104,  -104,  -104,  -104,
   -79,   -78,   -88,   -81,  -104,  -104,  -104,   -62,   -19,   -23,
  -104,  -104,  -104,   -77,   -80,  -104,   -87,   -85,   -59,   -27,
   -99,  -101,  -102,   -30,   -33,   -82,  -104,  -100,  -104,   -88,
   -88,   -86,   -83 ]

racc_goto_table = [
    77,    61,    42,    54,    59,    99,    33,    91,   157,   120,
     1,     2,   157,   157,    57,     4,    69,    69,    69,    98,
    32,   100,    73,     5,    98,    98,    44,    46,    47,    74,
   149,   153,   154,    92,    96,    61,   143,    99,    97,    99,
    65,    70,    71,    57,    57,    91,    30,   101,    10,    11,
    39,    79,    85,   125,    69,    69,    69,    86,   126,    69,
    69,    87,   127,    88,   128,    91,    89,   129,   112,    53,
    61,    58,    96,   116,    93,   113,   114,   105,   136,    57,
    84,    57,   124,   119,   145,   158,   135,    69,   156,    69,
   102,    96,   nil,   nil,   nil,   132,   144,   nil,   nil,   nil,
   nil,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,   nil,
   nil,   nil,   nil,   161,   162 ]

racc_goto_check = [
    46,    36,    31,    29,    35,    42,    43,    30,    54,    48,
     1,     2,    54,    54,    31,     3,    31,    31,    31,    41,
     4,    41,     5,     6,    41,    41,    13,    13,    13,    43,
    17,    17,    17,    29,    36,    36,    48,    42,    35,    42,
    28,    28,    28,    31,    31,    30,     7,     8,     9,    10,
    11,    12,    14,    15,    31,    31,    31,    18,    19,    31,
    31,    20,    21,    22,    23,    30,    24,    25,    29,    26,
    36,    27,    36,    35,    32,    33,    34,    37,    38,    31,
    39,    31,    40,    47,    49,    50,    51,    31,    52,    31,
    53,    36,   nil,   nil,   nil,    36,    46,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,    46,    46 ]

racc_goto_pointer = [
   nil,    10,    11,    13,    11,   -10,    21,    40,   -25,    44,
    45,    37,    12,    11,     4,   -54,   nil,  -110,     8,   -50,
    11,   -47,    12,   -46,    14,   -44,    44,    45,    13,   -22,
   -47,   -11,    17,   -18,   -17,   -22,   -25,    -6,   -45,    35,
   -24,   -46,   -61,    -3,   nil,   nil,   -36,   -20,   -94,   -49,
   -70,   -35,   -59,    15,  -141 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    35,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,    62,   nil,   nil,    63,   nil,   151,   nil,   nil,   nil,
   nil,    66,    68,   nil,    34,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   150 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 38, :_reduce_none,
  0, 39, :_reduce_none,
  2, 39, :_reduce_none,
  0, 44, :_reduce_4,
  0, 45, :_reduce_5,
  5, 43, :_reduce_6,
  2, 43, :_reduce_none,
  0, 40, :_reduce_8,
  2, 40, :_reduce_none,
  1, 46, :_reduce_none,
  2, 46, :_reduce_11,
  3, 46, :_reduce_none,
  2, 46, :_reduce_none,
  2, 46, :_reduce_none,
  2, 46, :_reduce_15,
  2, 46, :_reduce_16,
  0, 51, :_reduce_17,
  0, 52, :_reduce_18,
  6, 46, :_reduce_19,
  1, 46, :_reduce_none,
  0, 55, :_reduce_21,
  0, 56, :_reduce_22,
  6, 47, :_reduce_23,
  1, 47, :_reduce_none,
  0, 57, :_reduce_25,
  0, 58, :_reduce_26,
  7, 47, :_reduce_none,
  0, 59, :_reduce_28,
  0, 60, :_reduce_29,
  7, 47, :_reduce_30,
  0, 61, :_reduce_31,
  0, 62, :_reduce_32,
  7, 47, :_reduce_33,
  2, 53, :_reduce_none,
  2, 53, :_reduce_35,
  2, 53, :_reduce_36,
  2, 53, :_reduce_37,
  2, 53, :_reduce_38,
  1, 63, :_reduce_39,
  2, 63, :_reduce_40,
  3, 63, :_reduce_41,
  1, 66, :_reduce_42,
  2, 66, :_reduce_43,
  3, 67, :_reduce_44,
  0, 69, :_reduce_none,
  1, 69, :_reduce_none,
  0, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 64, :_reduce_50,
  2, 64, :_reduce_51,
  3, 64, :_reduce_52,
  1, 72, :_reduce_53,
  2, 72, :_reduce_54,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  0, 74, :_reduce_57,
  0, 75, :_reduce_58,
  6, 50, :_reduce_59,
  0, 76, :_reduce_60,
  0, 77, :_reduce_61,
  5, 50, :_reduce_62,
  1, 65, :_reduce_63,
  2, 65, :_reduce_64,
  2, 65, :_reduce_65,
  1, 78, :_reduce_66,
  2, 78, :_reduce_67,
  1, 79, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 41, :_reduce_none,
  2, 41, :_reduce_none,
  1, 80, :_reduce_none,
  2, 80, :_reduce_none,
  4, 81, :_reduce_75,
  1, 84, :_reduce_76,
  3, 84, :_reduce_77,
  2, 84, :_reduce_none,
  0, 85, :_reduce_79,
  3, 85, :_reduce_80,
  0, 86, :_reduce_81,
  0, 87, :_reduce_82,
  7, 85, :_reduce_83,
  0, 88, :_reduce_84,
  0, 89, :_reduce_85,
  6, 85, :_reduce_86,
  3, 85, :_reduce_87,
  0, 83, :_reduce_none,
  3, 83, :_reduce_89,
  1, 82, :_reduce_none,
  0, 42, :_reduce_none,
  0, 90, :_reduce_92,
  3, 42, :_reduce_93,
  1, 48, :_reduce_none,
  0, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 54, :_reduce_99,
  2, 54, :_reduce_100,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 71, :_reduce_103 ]

racc_reduce_n = 104

racc_shift_n = 163

racc_token_table = {
  false => 0,
  :error => 1,
  "%%" => 2,
  "%{" => 3,
  :C_DECLARATION => 4,
  "%}" => 5,
  "%require" => 6,
  :STRING => 7,
  "%expect" => 8,
  :INTEGER => 9,
  "%define" => 10,
  "%param" => 11,
  "%lex-param" => 12,
  "%parse-param" => 13,
  "%initial-action" => 14,
  "{" => 15,
  "}" => 16,
  ";" => 17,
  "%union" => 18,
  "%destructor" => 19,
  "%printer" => 20,
  "%error-token" => 21,
  "%token" => 22,
  "%type" => 23,
  "%left" => 24,
  "%right" => 25,
  "%nonassoc" => 26,
  :TAG => 27,
  :IDENTIFIER => 28,
  :CHARACTER => 29,
  ":" => 30,
  "|" => 31,
  "%prec" => 32,
  "[" => 33,
  "]" => 34,
  :IDENT_COLON => 35,
  "{...}" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"%%\"",
  "\"%{\"",
  "C_DECLARATION",
  "\"%}\"",
  "\"%require\"",
  "STRING",
  "\"%expect\"",
  "INTEGER",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%initial-action\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%error-token\"",
  "\"%token\"",
  "\"%type\"",
  "\"%left\"",
  "\"%right\"",
  "\"%nonassoc\"",
  "TAG",
  "IDENTIFIER",
  "CHARACTER",
  "\":\"",
  "\"|\"",
  "\"%prec\"",
  "\"[\"",
  "\"]\"",
  "IDENT_COLON",
  "\"{...}\"",
  "$start",
  "input",
  "prologue_declarations",
  "bison_declarations",
  "grammar",
  "epilogue_opt",
  "prologue_declaration",
  "@1",
  "@2",
  "bison_declaration",
  "grammar_declaration",
  "variable",
  "value",
  "params",
  "@3",
  "@4",
  "symbol_declaration",
  "generic_symlist",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "token_declaration_list",
  "token_declaration",
  "id",
  "int_opt",
  "alias",
  "string_as_id",
  "symbol_declaration_list",
  "symbol",
  "@13",
  "@14",
  "@15",
  "@16",
  "token_declaration_list_for_precedence",
  "token_declaration_for_precedence",
  "rules_or_grammar_declaration",
  "rules",
  "id_colon",
  "named_ref_opt",
  "rhs_list",
  "rhs",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "generic_symlist_item" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_4(val, _values, result)
                                @lexer.status = :c_declaration
                            @lexer.end_symbol = '%}'
                            @grammar.prologue_first_lineno = @lexer.line

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_5(val, _values, result)
                                @lexer.status = :initial
                            @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_6(val, _values, result)
                                @grammar.prologue = val[2].s_value

    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_8(val, _values, result)
     result = ""
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_11(val, _values, result)
     @grammar.expect = val[1]
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_15(val, _values, result)
                             val[1].each {|token|
                           token.references = []
                           @grammar.lex_param = @grammar.build_code(:lex_param, token).token_code.s_value
                         }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_16(val, _values, result)
                             val[1].each {|token|
                           token.references = []
                           @grammar.parse_param = @grammar.build_code(:parse_param, token).token_code.s_value
                         }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_17(val, _values, result)
                             @lexer.status = :c_declaration
                         @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_18(val, _values, result)
                             @lexer.status = :initial
                         @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_19(val, _values, result)
                             @grammar.initial_action = @grammar.build_code(:initial_action, val[3])

    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_21(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_22(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_23(val, _values, result)
                               @grammar.set_union(@grammar.build_code(:union, val[3]), val[3].line)

    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_25(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_28(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_29(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_30(val, _values, result)
                               @grammar.add_printer(ident_or_tags: val[6], code: @grammar.build_code(:printer, val[3]), lineno: val[3].line)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_31(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_32(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_33(val, _values, result)
                               @grammar.add_error_token(ident_or_tags: val[6], code: @grammar.build_code(:error_token, val[3]), lineno: val[3].line)

    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_35(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              @grammar.add_type(id: id, tag: hash[:tag])
                            }
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_36(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_left(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_37(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_right(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_38(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_nonassoc(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_39(val, _values, result)
                              val[0].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: nil, replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_40(val, _values, result)
                              val[1].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[0], replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_41(val, _values, result)
                              val[2].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[1], replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_42(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_43(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_44(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_50(val, _values, result)
                               result = [{tag: nil, tokens: val[0]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_51(val, _values, result)
                               result = [{tag: val[0], tokens: val[1]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_52(val, _values, result)
                             result = val[0].append({tag: val[1], tokens: val[2]})

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_53(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_54(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_57(val, _values, result)
                  @lexer.status = :c_declaration
              @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_58(val, _values, result)
                  @lexer.status = :initial
              @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_59(val, _values, result)
                  result = val[0].append(val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_60(val, _values, result)
                  @lexer.status = :c_declaration
              @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_61(val, _values, result)
                  @lexer.status = :initial
              @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_62(val, _values, result)
                  result = [val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_63(val, _values, result)
                                             result = [{tag: nil, tokens: val[0]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_64(val, _values, result)
                                             result = [{tag: val[0], tokens: val[1]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 246)
  def _reduce_65(val, _values, result)
                                             result = val[0].append({tag: nil, tokens: val[1]})

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_66(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 250)
  def _reduce_67(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_75(val, _values, result)
                 lhs = val[0]
             lhs.alias = val[1]
             val[3].each {|hash|
               @grammar.add_rule(lhs: lhs, rhs: hash[:rhs], lineno: hash[:lineno])
             }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_76(val, _values, result)
                    result = [{rhs: val[0], lineno: val[0].first&.line || @lexer.line - 1}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_77(val, _values, result)
                    result = val[0].append({rhs: val[2], lineno: val[2].first&.line || @lexer.line - 1})

    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_79(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_80(val, _values, result)
               token = val[1]
           val[1].alias = val[2]
           result = val[0].append(token)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_81(val, _values, result)
               @lexer.status = :c_declaration
           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 296)
  def _reduce_82(val, _values, result)
               @lexer.status = :initial
           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_83(val, _values, result)
               token = val[3]
           token.alias = val[6]
           result = val[0].append(token)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_84(val, _values, result)
               @lexer.status = :c_declaration
           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_85(val, _values, result)
               @lexer.status = :initial
           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_86(val, _values, result)
               token = val[2]
           token.alias = val[5]
           result = [token]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_87(val, _values, result)
               sym = @grammar.find_symbol_by_id!(val[2])
           result = val[0].append(sym)

    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_89(val, _values, result)
     result = val[1].s_value
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_92(val, _values, result)
                        @lexer.status = :c_declaration
                    @lexer.end_symbol = '\Z'
                    @grammar.epilogue_first_lineno = @lexer.line + 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_93(val, _values, result)
                        @lexer.status = :initial
                    @lexer.end_symbol = nil
                    @grammar.epilogue = val[2].s_value

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.y', 353)
  def _reduce_99(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_100(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_103(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Ident, s_value: val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class NewParser
end   # module Lrama
