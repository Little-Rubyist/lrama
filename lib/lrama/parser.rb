#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"

module Racc
  VERSION   = '1.8.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is an LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debugging information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-F, --frozen]
#   Output parser which declares frozen_string_literals: true
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("parse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end
module Lrama
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 404)

include Lrama::Report::Duration

def initialize(text, path, debug = false)
  @grammar_file = Lrama::Lexer::GrammarFile.new(path, text)
  @yydebug = debug
  @rule_counter = Lrama::Grammar::Counter.new(0)
  @midrule_action_counter = Lrama::Grammar::Counter.new(1)
end

def parse
  report_duration(:parse) do
    @lexer = Lrama::Lexer.new(@grammar_file)
    @grammar = Lrama::Grammar.new(@rule_counter)
    @precedence_number = 0
    reset_precs
    do_parse
    @grammar
  end
end

def next_token
  @lexer.next_token
end

def on_error(error_token_id, error_value, value_stack)
  if error_value.is_a?(Lrama::Lexer::Token)
    location = error_value.location
    value = "'#{error_value.s_value}'"
  else
    location = @lexer.location
    value = error_value.inspect
  end

  error_message = "parse error on value #{value} (#{token_to_str(error_token_id) || '?'})"

  raise_parse_error(error_message, location)
end

def on_action_error(error_message, error_value)
  if error_value.is_a?(Lrama::Lexer::Token)
    location = error_value.location
  else
    location = @lexer.location
  end

  raise_parse_error(error_message, location)
end

private

def reset_precs
  @prec_seen = false
  @code_after_prec = false
end

def begin_c_declaration(end_symbol)
  @lexer.status = :c_declaration
  @lexer.end_symbol = end_symbol
end

def end_c_declaration
  @lexer.status = :initial
  @lexer.end_symbol = nil
end

def raise_parse_error(error_message, location)
  raise ParseError, location.generate_error_message(error_message)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    94,    50,    95,   168,    50,    77,   174,    50,    77,   168,
    50,    77,   174,     6,    77,    85,    50,    50,    49,    49,
    77,    74,    81,    50,    50,    49,    49,    42,    81,    81,
    50,    50,    49,    49,    43,    81,   115,    50,    92,    49,
   151,    77,   101,   152,    46,   172,   170,   171,   152,   177,
   171,    96,   170,   171,    86,   177,   171,    20,    24,    25,
    26,    27,    28,    29,    30,    31,    92,    34,    32,    33,
    36,    37,    38,    39,    40,    50,     4,    49,     5,    77,
   101,   182,   183,   184,   130,    20,    24,    25,    26,    27,
    28,    29,    30,    31,    47,    34,    32,    33,    36,    37,
    38,    39,    40,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    54,    20,    24,    25,    26,    27,    28,    29,
    30,    31,    54,    34,    32,    33,    36,    37,    38,    39,
    40,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    45,    20,    24,    25,    26,    27,    28,    29,    30,    31,
    54,    34,    32,    33,    36,    37,    38,    39,    40,    50,
     4,    49,     5,    77,   101,    50,    50,    49,    49,    77,
   101,    50,    50,    49,    49,    77,    77,    50,    50,    49,
    49,    77,    77,    50,    50,    49,   198,    77,    77,    50,
    50,   198,    49,    77,    77,    50,    50,   198,    49,    77,
   182,   183,   184,   130,   205,   210,   217,   206,   206,   206,
    50,    50,    49,    49,    50,    50,    49,    49,    50,    57,
    49,   182,   183,   184,   118,   119,    54,    54,    54,    54,
    54,    63,    64,    65,    66,    67,    69,    87,    54,    54,
   106,   110,   117,   124,   125,   127,   130,   131,   135,   140,
   141,   142,   143,   145,   146,    77,   155,   140,   158,   155,
   162,   163,    69,   165,   166,   173,   178,   155,   185,   130,
   189,   155,   191,   130,   155,   200,   155,   130,    69,   166,
   207,   166,    69,    69,   215,   130,    69 ]

racc_action_check = [
    48,   154,    48,   154,   160,   154,   160,   179,   160,   179,
   190,   179,   190,     1,   190,    40,    35,    36,    35,    36,
    35,    35,    36,    37,    38,    37,    38,     5,    37,    38,
    39,    79,    39,    79,     6,    39,    79,    60,    46,    60,
   139,    60,    60,   139,     9,   157,   154,   154,   157,   160,
   160,    48,   179,   179,    40,   190,   190,    46,    46,    46,
    46,    46,    46,    46,    46,    46,    88,    46,    46,    46,
    46,    46,    46,    46,    46,    61,     0,    61,     0,    61,
    61,   167,   167,   167,   167,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    11,    88,    88,    88,    88,    88,
    88,    88,    88,     3,     3,     3,     3,     3,     3,     3,
     3,     3,    13,     3,     3,     3,     3,     3,     3,     3,
     3,     3,    14,     3,     3,     3,     3,     3,     3,     3,
     3,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
    15,     8,     8,     8,     8,     8,     8,     8,     8,    62,
     2,    62,     2,    62,    62,   102,    12,   102,    12,   102,
   102,    72,    74,    72,    74,    72,    74,   110,   170,   110,
   170,   110,   170,   177,   185,   177,   185,   177,   185,   191,
   206,   191,   206,   191,   206,   207,    70,   207,    70,   207,
   175,   175,   175,   175,   197,   202,   214,   197,   202,   214,
    81,   106,    81,   106,   107,   113,   107,   113,   115,    16,
   115,   199,   199,   199,    86,    86,    17,    20,    24,    25,
    26,    27,    28,    29,    30,    31,    34,    41,    52,    57,
    68,    71,    85,    89,    90,    91,    92,    98,   109,   117,
   118,   119,   120,   129,   130,   136,   141,   142,   144,   145,
   146,   147,   151,   152,   153,   159,   164,   166,   168,   169,
   172,   173,   174,   176,   178,   188,   189,   193,   194,   196,
   198,   201,   203,   205,   209,   210,   216 ]

racc_action_pointer = [
    66,    13,   150,    90,   nil,    20,    34,   nil,   118,    35,
   nil,    88,   163,    63,    73,   101,   214,   177,   nil,   nil,
   178,   nil,   nil,   nil,   179,   180,   181,   226,   227,   228,
   229,   230,   nil,   nil,   228,    13,    14,    20,    21,    27,
    10,   235,   nil,   nil,   nil,   nil,    34,   nil,    -5,   nil,
   nil,   nil,   189,   nil,   nil,   nil,   nil,   190,   nil,   nil,
    34,    72,   156,   nil,   nil,   nil,   nil,   nil,   232,   nil,
   193,   233,   168,   nil,   169,   nil,   nil,   nil,   nil,    28,
   nil,   207,   nil,   nil,   nil,   201,   220,   nil,    62,   234,
   222,   223,   192,   nil,   nil,   nil,   nil,   nil,   245,   nil,
   nil,   nil,   162,   nil,   nil,   nil,   208,   211,   nil,   242,
   174,   nil,   nil,   212,   nil,   215,   nil,   244,   207,   210,
   241,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   210,
   249,   nil,   nil,   nil,   nil,   nil,   248,   nil,   nil,    -2,
   nil,   209,   252,   nil,   256,   212,   205,   211,   nil,   nil,
   nil,   254,   258,   218,    -2,   nil,   nil,     3,   nil,   219,
     1,   nil,   nil,   nil,   223,   nil,   220,    30,   227,   215,
   175,   nil,   227,   224,   231,   149,   219,   180,   227,     4,
   nil,   nil,   nil,   nil,   nil,   181,   nil,   nil,   273,   229,
     7,   186,   nil,   223,   270,   nil,   233,   162,   239,   170,
   nil,   235,   163,   274,   nil,   275,   187,   192,   nil,   234,
   231,   nil,   nil,   nil,   164,   nil,   278,   nil,   nil ]

racc_action_default = [
    -1,  -129,    -1,    -3,   -10,  -129,  -129,    -2,    -3,  -129,
   -16,  -129,  -129,  -129,  -129,  -129,  -129,  -129,   -24,   -25,
  -129,   -32,   -33,   -34,  -129,  -129,  -129,  -129,  -129,  -129,
  -129,  -129,   -43,   -44,   -51,  -129,  -129,  -129,  -129,  -129,
  -129,  -129,   -13,   219,    -4,   -26,  -129,   -17,  -124,   -95,
   -96,  -123,   -14,   -19,   -87,   -20,   -21,  -129,   -23,   -31,
  -129,  -129,  -129,   -38,   -39,   -40,   -41,   -42,   -45,   -52,
  -129,   -46,   -80,   -82,  -129,   -85,   -86,  -128,   -47,   -90,
   -92,  -129,   -48,   -49,   -50,  -129,  -129,   -11,    -5,    -7,
   -97,  -129,   -69,   -18,  -125,  -126,  -127,   -15,  -129,   -22,
   -27,   -28,   -29,   -35,   -36,   -37,  -129,   -53,   -55,   -57,
  -129,   -81,   -83,   -90,   -91,  -129,   -93,  -129,  -129,  -129,
  -129,    -6,    -8,    -9,  -121,   -98,   -99,  -100,   -70,  -129,
  -129,   -88,   -30,   -56,   -54,   -58,   -77,   -84,   -94,  -129,
   -63,   -67,  -129,   -12,  -129,   -67,  -129,  -129,   -59,   -78,
   -79,   -51,  -129,   -61,   -65,   -68,   -71,  -129,  -122,  -101,
  -102,  -104,  -120,   -89,  -129,   -64,   -67,   -69,   -95,   -69,
  -129,  -117,  -129,   -67,   -95,   -69,   -69,  -129,   -67,   -66,
   -72,   -73,  -110,  -111,  -112,  -129,   -75,   -76,  -129,   -67,
  -103,  -129,  -105,   -69,   -51,  -109,   -60,  -129,   -95,  -113,
  -118,   -62,  -129,   -51,  -108,   -51,  -129,  -129,  -115,  -129,
   -69,  -106,   -74,  -114,  -129,  -119,   -51,  -116,  -107 ]

racc_goto_table = [
    70,   100,   100,   100,   129,    51,    89,    73,   153,    91,
   103,   104,   105,    58,   161,   139,    59,   176,   108,     1,
    60,    61,    62,    53,    55,    56,   181,   122,   123,    79,
    79,    79,    79,   114,   193,   116,   160,     3,    41,     7,
   157,   120,   161,   100,   111,   196,   112,   176,   121,    48,
    93,    91,   132,    99,   133,   134,   201,    68,   208,    71,
     9,   148,    97,   109,   190,    44,   136,   114,   179,   138,
   197,   149,   113,   150,   113,    98,   202,   147,   126,   180,
   159,   186,   137,    78,    82,    83,    84,   192,   194,   188,
   209,   144,   214,   nil,   nil,   167,   nil,   nil,   nil,   109,
   109,   175,   nil,   nil,   nil,   203,   113,   nil,   113,   nil,
   nil,   187,   nil,   nil,   nil,   nil,   nil,   164,   195,   nil,
   167,   nil,   216,   nil,   nil,   nil,   199,   nil,   nil,   nil,
   nil,   175,   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   213,   199,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   204,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   211,
   nil,   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   218 ]

racc_goto_check = [
    28,    20,    20,    20,    41,    30,     8,    44,    34,    12,
    22,    22,    22,    15,    40,    33,    15,    39,    29,     1,
    15,    15,    15,    16,    16,    16,    37,     5,     9,    30,
    30,    30,    30,    47,    37,    47,    51,     6,    10,     6,
    33,    11,    40,    20,    44,    34,    44,    39,     8,    13,
    14,    12,    22,    15,    29,    29,    34,    23,    37,    24,
     7,    31,    16,    30,    51,     7,    32,    47,    35,    47,
    38,    42,    30,    43,    30,    45,    38,    46,    49,    41,
    50,    41,    44,    25,    25,    25,    25,    41,    41,    52,
    53,    54,    38,   nil,   nil,    20,   nil,   nil,   nil,    30,
    30,    20,   nil,   nil,   nil,    41,    30,   nil,    30,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,    28,    20,   nil,
    20,   nil,    41,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28 ]

racc_goto_pointer = [
   nil,    19,   nil,   nil,   nil,   -62,    37,    57,   -40,   -61,
    34,   -46,   -37,    37,     2,    -4,    10,   nil,   nil,   nil,
   -59,   nil,   -50,    23,    24,    47,   nil,   nil,   -34,   -52,
    -7,   -75,   -43,  -102,  -133,   -98,   nil,  -141,  -115,  -143,
  -131,   -88,   -65,   -63,   -28,    21,   -54,   -46,   nil,   -12,
   -65,  -109,   -82,  -110,   -33 ]

racc_goto_default = [
   nil,   nil,     2,     8,    88,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,    52,   nil,    21,    22,    23,
    72,   102,   nil,   nil,   nil,   nil,    35,   107,   nil,   nil,
    75,   nil,   nil,   nil,   nil,   154,   128,   nil,   nil,   169,
   156,   nil,    76,   nil,   nil,   nil,   nil,    80,    90,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 63, :_reduce_1,
  2, 63, :_reduce_2,
  0, 64, :_reduce_3,
  2, 64, :_reduce_4,
  1, 65, :_reduce_5,
  2, 65, :_reduce_6,
  0, 66, :_reduce_none,
  1, 66, :_reduce_none,
  5, 58, :_reduce_none,
  0, 67, :_reduce_10,
  0, 68, :_reduce_11,
  5, 59, :_reduce_12,
  2, 59, :_reduce_none,
  1, 73, :_reduce_14,
  2, 73, :_reduce_15,
  1, 60, :_reduce_none,
  2, 60, :_reduce_17,
  3, 60, :_reduce_none,
  2, 60, :_reduce_none,
  2, 60, :_reduce_20,
  2, 60, :_reduce_21,
  3, 60, :_reduce_22,
  2, 60, :_reduce_23,
  1, 60, :_reduce_24,
  1, 60, :_reduce_25,
  2, 60, :_reduce_none,
  1, 78, :_reduce_27,
  1, 78, :_reduce_28,
  1, 79, :_reduce_29,
  2, 79, :_reduce_30,
  2, 69, :_reduce_31,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  3, 69, :_reduce_35,
  3, 69, :_reduce_36,
  3, 69, :_reduce_37,
  2, 69, :_reduce_38,
  2, 69, :_reduce_39,
  2, 69, :_reduce_40,
  2, 69, :_reduce_41,
  2, 69, :_reduce_42,
  1, 83, :_reduce_43,
  1, 83, :_reduce_44,
  2, 74, :_reduce_none,
  2, 74, :_reduce_46,
  2, 74, :_reduce_47,
  2, 74, :_reduce_48,
  2, 74, :_reduce_49,
  2, 74, :_reduce_50,
  0, 85, :_reduce_none,
  1, 85, :_reduce_none,
  1, 86, :_reduce_53,
  2, 86, :_reduce_54,
  2, 80, :_reduce_55,
  3, 80, :_reduce_56,
  0, 89, :_reduce_none,
  1, 89, :_reduce_none,
  3, 84, :_reduce_59,
  8, 75, :_reduce_60,
  5, 76, :_reduce_61,
  8, 76, :_reduce_62,
  1, 90, :_reduce_63,
  3, 90, :_reduce_64,
  1, 91, :_reduce_65,
  3, 91, :_reduce_66,
  0, 97, :_reduce_none,
  1, 97, :_reduce_none,
  0, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 92, :_reduce_71,
  3, 92, :_reduce_72,
  3, 92, :_reduce_73,
  6, 92, :_reduce_74,
  3, 92, :_reduce_75,
  3, 92, :_reduce_76,
  0, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 88, :_reduce_79,
  1, 101, :_reduce_80,
  2, 101, :_reduce_81,
  1, 81, :_reduce_82,
  2, 81, :_reduce_83,
  3, 81, :_reduce_84,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  0, 102, :_reduce_87,
  0, 103, :_reduce_88,
  5, 72, :_reduce_89,
  1, 104, :_reduce_90,
  2, 104, :_reduce_91,
  1, 82, :_reduce_92,
  2, 82, :_reduce_93,
  3, 82, :_reduce_94,
  1, 87, :_reduce_95,
  1, 87, :_reduce_96,
  0, 106, :_reduce_none,
  1, 106, :_reduce_none,
  2, 61, :_reduce_none,
  2, 61, :_reduce_none,
  4, 105, :_reduce_101,
  1, 107, :_reduce_102,
  3, 107, :_reduce_103,
  1, 108, :_reduce_104,
  3, 108, :_reduce_105,
  5, 108, :_reduce_106,
  7, 108, :_reduce_107,
  4, 108, :_reduce_108,
  3, 108, :_reduce_109,
  1, 94, :_reduce_110,
  1, 94, :_reduce_111,
  1, 94, :_reduce_112,
  1, 95, :_reduce_113,
  3, 95, :_reduce_114,
  2, 95, :_reduce_115,
  4, 95, :_reduce_116,
  0, 109, :_reduce_117,
  0, 110, :_reduce_118,
  5, 96, :_reduce_119,
  3, 93, :_reduce_120,
  0, 111, :_reduce_121,
  3, 62, :_reduce_122,
  1, 70, :_reduce_none,
  0, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 99, :_reduce_128 ]

racc_reduce_n = 129

racc_shift_n = 219

racc_token_table = {
  false => 0,
  :error => 1,
  :C_DECLARATION => 2,
  :CHARACTER => 3,
  :IDENT_COLON => 4,
  :IDENTIFIER => 5,
  :INTEGER => 6,
  :STRING => 7,
  :TAG => 8,
  "%%" => 9,
  "%{" => 10,
  "%}" => 11,
  "%require" => 12,
  "%expect" => 13,
  "%define" => 14,
  "%param" => 15,
  "%lex-param" => 16,
  "%parse-param" => 17,
  "%code" => 18,
  "%initial-action" => 19,
  "%no-stdlib" => 20,
  "%locations" => 21,
  ";" => 22,
  "%union" => 23,
  "%destructor" => 24,
  "%printer" => 25,
  "%error-token" => 26,
  "%after-shift" => 27,
  "%before-reduce" => 28,
  "%after-reduce" => 29,
  "%after-shift-error-token" => 30,
  "%after-pop-stack" => 31,
  "-temp-group" => 32,
  "%token" => 33,
  "%type" => 34,
  "%nterm" => 35,
  "%left" => 36,
  "%right" => 37,
  "%precedence" => 38,
  "%nonassoc" => 39,
  "%rule" => 40,
  "(" => 41,
  ")" => 42,
  ":" => 43,
  "%inline" => 44,
  "," => 45,
  "|" => 46,
  "%empty" => 47,
  "%prec" => 48,
  "{" => 49,
  "}" => 50,
  "?" => 51,
  "+" => 52,
  "*" => 53,
  "[" => 54,
  "]" => 55,
  "{...}" => 56 }

racc_nt_base = 57

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "C_DECLARATION",
  "CHARACTER",
  "IDENT_COLON",
  "IDENTIFIER",
  "INTEGER",
  "STRING",
  "TAG",
  "\"%%\"",
  "\"%{\"",
  "\"%}\"",
  "\"%require\"",
  "\"%expect\"",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%code\"",
  "\"%initial-action\"",
  "\"%no-stdlib\"",
  "\"%locations\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%error-token\"",
  "\"%after-shift\"",
  "\"%before-reduce\"",
  "\"%after-reduce\"",
  "\"%after-shift-error-token\"",
  "\"%after-pop-stack\"",
  "\"-temp-group\"",
  "\"%token\"",
  "\"%type\"",
  "\"%nterm\"",
  "\"%left\"",
  "\"%right\"",
  "\"%precedence\"",
  "\"%nonassoc\"",
  "\"%rule\"",
  "\"(\"",
  "\")\"",
  "\":\"",
  "\"%inline\"",
  "\",\"",
  "\"|\"",
  "\"%empty\"",
  "\"%prec\"",
  "\"{\"",
  "\"}\"",
  "\"?\"",
  "\"+\"",
  "\"*\"",
  "\"[\"",
  "\"]\"",
  "\"{...}\"",
  "$start",
  "input",
  "prologue_declaration",
  "bison_declaration",
  "rules_or_grammar_declaration",
  "epilogue_declaration",
  "\"-many@prologue_declaration\"",
  "\"-many@bison_declaration\"",
  "\"-many1@rules_or_grammar_declaration\"",
  "\"-option@epilogue_declaration\"",
  "@1",
  "@2",
  "grammar_declaration",
  "variable",
  "value",
  "param",
  "\"-many1@param\"",
  "symbol_declaration",
  "rule_declaration",
  "inline_declaration",
  "symbol",
  "\"-group@symbol|TAG\"",
  "\"-many1@-group@symbol|TAG\"",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "\"-group@\\\"%type\\\"|\\\"%nterm\\\"\"",
  "token_declaration",
  "\"-option@TAG\"",
  "\"-many1@token_declaration\"",
  "id",
  "alias",
  "\"-option@INTEGER\"",
  "rule_args",
  "rule_rhs_list",
  "rule_rhs",
  "named_ref",
  "parameterizing_suffix",
  "parameterizing_args",
  "midrule_action",
  "\"-option@%empty\"",
  "\"-option@named_ref\"",
  "string_as_id",
  "\"-option@string_as_id\"",
  "\"-many1@symbol\"",
  "@3",
  "@4",
  "\"-many1@id\"",
  "rules",
  "\"-option@;\"",
  "rhs_list",
  "rhs",
  "@5",
  "@6",
  "@7" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_1(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_2(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_3(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_4(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_5(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_6(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_10(val, _values, result)
                                begin_c_declaration("%}")
                            @grammar.prologue_first_lineno = @lexer.line

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_11(val, _values, result)
                                end_c_declaration

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_12(val, _values, result)
                                @grammar.prologue = val[2].s_value

    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_14(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_17(val, _values, result)
     @grammar.expect = val[1]
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_20(val, _values, result)
                             val[1].each {|token|
                           @grammar.lex_param = Grammar::Code::NoReferenceCode.new(type: :lex_param, token_code: token).token_code.s_value
                         }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_21(val, _values, result)
                             val[1].each {|token|
                           @grammar.parse_param = Grammar::Code::NoReferenceCode.new(type: :parse_param, token_code: token).token_code.s_value
                         }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_22(val, _values, result)
                             @grammar.add_percent_code(id: val[1], code: val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_23(val, _values, result)
                             @grammar.initial_action = Grammar::Code::InitialActionCode.new(type: :initial_action, token_code: val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_24(val, _values, result)
     @grammar.no_stdlib = true
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_25(val, _values, result)
     @grammar.locations = true
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_27(val, _values, result)
    result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_28(val, _values, result)
    result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_29(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_30(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_31(val, _values, result)
                               @grammar.set_union(
                             Grammar::Code::NoReferenceCode.new(type: :union, token_code: val[1]),
                             val[1].line
                           )

    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_35(val, _values, result)
                               @grammar.add_destructor(
                             ident_or_tags: val[2].flatten,
                             token_code: val[1],
                             lineno: val[1].line
                           )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_36(val, _values, result)
                               @grammar.add_printer(
                             ident_or_tags: val[2].flatten,
                             token_code: val[1],
                             lineno: val[1].line
                           )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_37(val, _values, result)
                               @grammar.add_error_token(
                             ident_or_tags: val[2].flatten,
                             token_code: val[1],
                             lineno: val[1].line
                           )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_38(val, _values, result)
                               @grammar.after_shift = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_39(val, _values, result)
                               @grammar.before_reduce = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_40(val, _values, result)
                               @grammar.after_reduce = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_41(val, _values, result)
                               @grammar.after_shift_error_token = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_42(val, _values, result)
                               @grammar.after_pop_stack = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_43(val, _values, result)
    result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_44(val, _values, result)
    result = val
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_46(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              @grammar.add_type(id: id, tag: hash[:tag])
                            }
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_47(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_left(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_48(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_right(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_49(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_precedence(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_50(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_nonassoc(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_53(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_54(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_55(val, _values, result)
                              val[1].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[0], replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_56(val, _values, result)
                              val[2].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[1], replace: true)
                          }

    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_59(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_60(val, _values, result)
                            rule = Grammar::ParameterizingRule::Rule.new(val[1].s_value, val[3], val[7], tag: val[5])
                        @grammar.add_parameterizing_rule(rule)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_61(val, _values, result)
                            rule = Grammar::ParameterizingRule::Rule.new(val[2].s_value, [], val[4], is_inline: true)
                        @grammar.add_parameterizing_rule(rule)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_62(val, _values, result)
                            rule = Grammar::ParameterizingRule::Rule.new(val[2].s_value, val[4], val[7], is_inline: true)
                        @grammar.add_parameterizing_rule(rule)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_63(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_64(val, _values, result)
     result = val[0].append(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_65(val, _values, result)
                      builder = val[0]
                  result = [builder]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_66(val, _values, result)
                      builder = val[2]
                  result = val[0].append(builder)

    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_71(val, _values, result)
                  reset_precs
              result = Grammar::ParameterizingRule::Rhs.new

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_72(val, _values, result)
                  token = val[1]
              token.alias_name = val[2]
              builder = val[0]
              builder.symbols << token
              result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_73(val, _values, result)
                    builder = val[0]
                builder.symbols << Lrama::Lexer::Token::InstantiateRule.new(s_value: val[2], location: @lexer.location, args: [val[1]])
                result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_74(val, _values, result)
                    builder = val[0]
                builder.symbols << Lrama::Lexer::Token::InstantiateRule.new(s_value: val[1].s_value, location: @lexer.location, args: val[3], lhs_tag: val[5])
                result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_75(val, _values, result)
                  user_code = val[1]
              user_code.alias_name = val[2]
              builder = val[0]
              builder.user_code = user_code
              result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_76(val, _values, result)
                  sym = @grammar.find_symbol_by_id!(val[2])
              @prec_seen = true
              builder = val[0]
              builder.precedence_sym = sym
              result = builder

    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 246)
  def _reduce_79(val, _values, result)
     result = val[0].s_value if val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 253)
  def _reduce_80(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 253)
  def _reduce_81(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_82(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_83(val, _values, result)
     result = [{tag: val[0], tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 250)
  def _reduce_84(val, _values, result)
     result = val[0].append({tag: val[1], tokens: val[2]})
    result
  end
.,.,

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_87(val, _values, result)
                   begin_c_declaration("}")

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_88(val, _values, result)
                   end_c_declaration

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_89(val, _values, result)
                   result = val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_90(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_91(val, _values, result)
    result = val[1] ? val[1].unshift(val[0]) : val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_92(val, _values, result)
     result = [{tag: nil, tokens: val[0]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 268)
  def _reduce_93(val, _values, result)
     result = [{tag: val[0], tokens: val[1]}]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_94(val, _values, result)
     result = val[0].append({tag: val[1], tokens: val[2]})
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_95(val, _values, result)
     on_action_error("ident after %prec", val[0]) if @prec_seen
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_96(val, _values, result)
     on_action_error("char after %prec", val[0]) if @prec_seen
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 280)
  def _reduce_101(val, _values, result)
                 lhs = val[0]
             lhs.alias_name = val[1]
             val[3].each do |builder|
               builder.lhs = lhs
               builder.complete_input
               @grammar.add_rule_builder(builder)
             end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_102(val, _values, result)
                    builder = val[0]
                if !builder.line
                  builder.line = @lexer.line - 1
                end
                result = [builder]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 299)
  def _reduce_103(val, _values, result)
                    builder = val[2]
                if !builder.line
                  builder.line = @lexer.line - 1
                end
                result = val[0].append(builder)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_104(val, _values, result)
               reset_precs
           result = @grammar.create_rule_builder(@rule_counter, @midrule_action_counter)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_105(val, _values, result)
               token = val[1]
           token.alias_name = val[2]
           builder = val[0]
           builder.add_rhs(token)
           result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_106(val, _values, result)
               token = Lrama::Lexer::Token::InstantiateRule.new(s_value: val[2], alias_name: val[3], location: @lexer.location, args: [val[1]], lhs_tag: val[4])
           builder = val[0]
           builder.add_rhs(token)
           builder.line = val[1].first_line
           result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_107(val, _values, result)
               token = Lrama::Lexer::Token::InstantiateRule.new(s_value: val[1].s_value, alias_name: val[5], location: @lexer.location, args: val[3], lhs_tag: val[6])
           builder = val[0]
           builder.add_rhs(token)
           builder.line = val[1].first_line
           result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_108(val, _values, result)
               user_code = val[1]
           user_code.alias_name = val[2]
           user_code.tag = val[3]
           builder = val[0]
           builder.user_code = user_code
           result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 346)
  def _reduce_109(val, _values, result)
               sym = @grammar.find_symbol_by_id!(val[2])
           @prec_seen = true
           builder = val[0]
           builder.precedence_sym = sym
           result = builder

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 353)
  def _reduce_110(val, _values, result)
     result = "option"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_111(val, _values, result)
     result = "nonempty_list"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_112(val, _values, result)
     result = "list"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_113(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_114(val, _values, result)
     result = val[0].append(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_115(val, _values, result)
     result = [Lrama::Lexer::Token::InstantiateRule.new(s_value: val[1].s_value, location: @lexer.location, args: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 360)
  def _reduce_116(val, _values, result)
     result = [Lrama::Lexer::Token::InstantiateRule.new(s_value: val[0].s_value, location: @lexer.location, args: val[2])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 364)
  def _reduce_117(val, _values, result)
                          if @prec_seen
                        on_action_error("multiple User_code after %prec", val[0])  if @code_after_prec
                        @code_after_prec = true
                      end
                      begin_c_declaration("}")

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_118(val, _values, result)
                          end_c_declaration

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_119(val, _values, result)
                          result = val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_120(val, _values, result)
     result = val[1].s_value
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_121(val, _values, result)
                                begin_c_declaration('\Z')
                            @grammar.epilogue_first_lineno = @lexer.line + 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_122(val, _values, result)
                                end_c_declaration
                            @grammar.epilogue = val[2].s_value

    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_128(val, _values, result)
     result = Lrama::Lexer::Token::Ident.new(s_value: val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Lrama
